#!/usr/bin/env python3

"""
Show hunks in FZF multi-select or single-select and do stuff with these hunks.

The output of `git diff <stuff>` is processed through this command, then it
lets you do FZF things with these hunks.

FZF Actions:

    Alt-A    do 'git add -p' on the selected hunks and refresh. Works well if
             for the output of `git diff`. Works regardless of '-a' command line
             option.

    Return   Unless '-a' is specified, open an editor on a hunk if we selected
             a single one. Otherwise, for '-a', do 'git add -p' on the selected
             hunks and return. If '-c' is specified, also do a 'git commit'.

Command line options:

    -a      Add selected hunks on 'Return'.
    -c      Also commit the changes, when '-a' is used.

"""

import sys
import os
import tempfile
import re
import os
from optparse import OptionParser
import itertools
import tempfile
import shlex
import subprocess

def system(cmd):
    return os.system(cmd)

class Abort(Exception): pass

def abort(msg):
    print(msg, file=sys.stderr)
    sys.exit(-1)

DIFF_LINE = re.compile(r"^diff --git a/(.*) b/(.*)$")
HUNK_HEADER = re.compile(r"^@@ -[^ ]+ [+]([0-9]+)[ ,][^@]*@@(.*)$")
OUTPUT = re.compile(r"^ *([0-9])+ +([^:]+):([0-9]+)")

def add(selected_hunks, nr_hunks, commit):
    cmd = ["git", "-c", "interactive.diffFilter=cat", "add", "-p"]
    process = subprocess.Popen(cmd,
                               stdout=subprocess.DEVNULL,
                               stdin=subprocess.PIPE)
    selected_hunks = set(selected_hunks)
    for idx in range(0, nr_hunks):
        if idx in selected_hunks:
            process.stdin.write(f"y\n".encode('utf-8'))
        else:
            process.stdin.write(f"n\n".encode('utf-8'))
    process.stdin.close()
    r = process.wait()
    if r != 0:
        abort("Error adding hunks")
        return
    if commit:
        os.system("git commit")

def get_selected_lines(hunks, output_lines):
    selected_hunks = []
    for line in output_lines:
        m = OUTPUT.match(line.decode('utf-8'))
        if m:
            (hunknum, filename, line) = m.groups()
            hunknum = int(hunknum)
            line = int(line)
            selected_hunks.append(hunks[(filename, hunknum)])
    return selected_hunks

def get_hunks(args):
    filename_color = "\x1b[38;2;155;255;155m"
    white = "\x1b[38;2;255;255;255m"
    lnum_color = "\x1b[38;2;77;127;77m"
    grey = "\x1b[38;2;255;255;155m"
    args = ' '.join(args)

    filename = ''
    hunknum = 1
    hunkindex = 0
    hunks = {}
    matches = []
    idx_hunks = []

    for line in os.popen(f"git diff {args}").readlines():
        m = DIFF_LINE.match(line)
        if m:
            filename = m.groups(0)[1]
            hunknum = 1
            continue
        m = HUNK_HEADER.match(line)
        if m:
            contextlines = 0
            hunks[(filename, hunknum)] = hunkindex
            line_num = int(m.groups(0)[0])
            title = m.groups(0)[1]
            matches.append("%3d %s%s%s:%s%d%s%s" % (
                hunknum, filename_color, filename,
                white, lnum_color, line_num, white, title))
            idx_hunks.append([filename, line_num])
            hunkindex += 1
            hunknum += 1
            continue
        if line.startswith('+') or line.startswith('-'):
            if len(idx_hunks) > 0:
                if len(idx_hunks[-1]) == 2:
                    idx_hunks[-1].append(contextlines)
        elif line.startswith(' '):
            contextlines += 1
    return (hunks, matches, idx_hunks)

def main():
    if sys.argv[1:2] == ["--binding-preview"]:
        m = OUTPUT.match(sys.argv[3])
        if not m:
            return

        (hunk_index, filename, line) = m.groups(0)
        cmd="git diff"
        if sys.argv[2]:
            cmd += " " + sys.argv[2]

        cmd = f"{cmd} | filterdiff -i 'a/'{filename} -i 'b/'{filename} --hunks {hunk_index} | tail -n +5 | delta-configured"
        sys.exit(os.system(cmd))
        return
    elif sys.argv[1:2] == ["--binding-add"]:
        args = [sys.argv[2]]
        output_lines = [o.encode('utf-8') for o in sys.argv[3:]]
        reload_command = True
        add_mode = True
        commit_mode = False
    else:
        parser = OptionParser()
        parser.add_option("-a", "--add", dest="add", action="store_true")
        parser.add_option("-c", "--commit", dest="commit", action="store_true")

        (options, args) = parser.parse_args()
        reload_command = False
        binding_add_mode = False
        add_mode = False
        if options.add:
            args = ""
            add_mode = True
        if options.commit:
            commit_mode = True
        else:
            commit_mode = False

    (hunks, matches, idx_hunks) = get_hunks(args)

    if reload_command:
        if add_mode:
            # try:
            selected_hunks = get_selected_lines(hunks, output_lines)
            # except:
            #     from traceback import print_exc
            #     print_exc(file=sys.stdout)
            add(selected_hunks, len(matches), commit_mode)
        (hunks, matches, idx_hunks) = get_hunks(args)
        for match in matches:
            sys.stdout.buffer.write(f"{match}\n".encode('utf-8'))
        return
    else:
        args = ' '.join(args)
        our_program = sys.argv[0]
        preview_program = our_program + f" --binding-preview '{args}' {{}}"
        add_program = our_program + f" --binding-add '{args}' {{+}}"

        fzf_options = [
            "--ansi", "-e", "--no-sort", "--tac", "-m",
            "--preview-window", "down:70%:noborder",
            "--preview", preview_program,
            "--bind", "alt-a:reload(" + add_program + ")"
        ]
        process = subprocess.Popen(["fzf"] + fzf_options,
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE)
        for match in matches:
            process.stdin.write(f"{match}\n".encode('utf-8'))
        process.stdin.close()
        res = process.wait()
        if res != 0:
            sys.exit(-1)
            return
        output_lines = process.stdout.readlines()

    selected_hunks = get_selected_lines(hunks, output_lines)
    if add_mode:
        add(selected_hunks, len(matches), commit_mode)
        return

    if len(selected_hunks) == 1:
        (filename, line_num, contextlines) = idx_hunks[selected_hunks[0]]
        editor = os.getenv("EDITOR", "vi")
        r = os.system("bash -c '%s %s +%d'" % (editor, filename, line_num + contextlines))
        sys.exit(r)

if __name__ == "__main__":
    main()

