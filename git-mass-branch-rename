#!/usr/bin/env python2

"""
Git branch editor.

This script spawns the editor configured in Git, in order to edit the local
list of branches as if it was a text file. It allows removing branches, adding
branches, changing branches' names, and setting a branch to a different
githash.
"""

import os
import pty
import subprocess as sp
import sys
import re
import tempfile
import argparse

PREFIX = "refs/heads/"

def dict_diff(a, b):
    for key in list(set(a.keys()) | set(b.keys())):
        yield (a.get(key, None), b.get(key, None))

def main():
    parser = argparse.ArgumentParser(description='Mass branch editor')
    parser.add_argument('--by-date', dest="by_date", action='store_true')
    args = parser.parse_args()

    x = os.popen('git for-each-ref --format="%(objectname) %(refname) ' +
                 '# %(committerdate:format:%Y-%m-%d): %(subject)"', "r")
    data = x.read()
    x.close()

    lst = []
    for line in data.splitlines():
        m = re.match(r"^([a-f0-9]+) ([^ ]+) (.*)$", line)
        (githash, refname, meta) = m.groups()
        if not refname.startswith(PREFIX):
            continue
        lst.append((githash, refname, meta))

    if args.by_date:
        lst.sort(key=lambda item: item[2])

    branches = {}
    idx = 1
    for item in lst:
        branches[idx] = item
        idx += 1

    editor = os.popen("git config core.editor", "r").read().strip()
    filename = tempfile.mktemp("git-mass-branch-rename")
    filehandle = open(filename, "w")
    for (key, (githash, refname, meta)) in branches.iteritems():
        refname = refname[len(PREFIX):]
        githash = githash[:12]
        print >>filehandle, "%d: %s %-35s  %s" % (key, githash, refname, meta)
    filehandle.close()

    cmd = "%s %s" % (editor, filename)
    os.system(cmd)

    output = {}
    for line in open(filename):
        m = re.match(r"^([0-9]+): +([a-f0-9]+) +([^ ]+)( +.*)$", line.strip())
        (idx, githash, new_name, _) = m.groups(0)
        idx = int(idx)
        output[idx] = (githash, new_name)

    os.unlink(filename)

    for (orig, after) in dict_diff(branches, output):
        cmd = None
        if after is None and orig is not None:
            (orig_githash, orig_refname, _) = orig
            cmd = "git update-ref -d %s" % (orig_refname, )
        elif orig is not None and after is not None:
            (orig_githash, orig_refname, _) = orig
            (new_githash, new_name) = after
            branch_name = orig_refname[len(PREFIX):]
            cmd = ""
            if orig_githash[:12] != new_githash:
                cmd = "git update-ref %s %s" % (orig_refname, new_githash)
            if branch_name != new_name:
                if cmd:
                    cmd += "&& "
                cmd += "git branch -M %s %s" % (branch_name, new_name)

        if cmd:
            print cmd
            os.system(cmd)

if __name__ == "__main__":
    main()
